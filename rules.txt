int kakemann = 10;
int *pKakemann = &kakemann;

pKakemann == Memory address                    // #H98347593847 // stack memory
*pKakemann == Value stored at memory address   // 10

int *pKakemann = (int *) malloc(theSizeYouWant * sizeof(int));            // Heap Memory
pKakemann = 20;
	// malloc should be used when variables need to traverse functions
	// pointers behave the same regardless of the memory allocation, if its automatic stack or allocated malloc
	// You use the "*" symbol to make a pointer, to remove the pointer you use the same symbol "*", to find the variable inside of the pointer
	// If you use the "&" symbol on a pointer variable, you will find the memory address of said pointer, and not the memory address of the variable inside of the pointer. This symbol should be used to find the memory address of a variable assigned to the stack

pKakemann == Memory address
*pKakemann == 20

Hungerian notation

	Function = Starts with small letters
	c file = starts with small letters
	h file = Same as c file
	
	l = long                                // lLongNumber
	d = double                              // dNumber
	c = char                                // cVowels
	i = int                                 // iIntegerNumber
	s = string                              // sInput
	sz = Zero terminated string             // szInput
	f = float                               // fNumber
	s + (First letter of struct = struct)   // spStefan (struct Person)
	a+type = array + type                   // acArray (char array)
	p+type = pointer + type                 // piAge (int*)
	

Making a static library
	You have files: 
		main.c 
		function.c
		function.h
	gcc -c function.c -O0 -g -o obj/function.o                  // Makes an function.o file
	ar rcs library/libraryName.a obj/function.o                 // Makes an library.a file, with function.o inside
	gcc -c main.c -o obj/main.o				                    // Makes an main.o file
	gcc -o main obj/main.o library/libraryName.a                // Compiles and makes a executable main file

gdb = debugger
	Remember to have -g in gcc compiling
	gdb filename
	break linenumber  /  break filename.c:linenumber
	run
	
	p variablename (prints variable)  /  display variablename
	watch variable (To stop whenever the variable changes)
	list linenumber/function (To show surrounding area)
	step (step into)
	next (step over)
	continue
	until linenumber
	
valgrind = Check for memory leaks
	valgrind --leak-check=yes --track-origins=yes
	
xdg-open to open jpg/pdf
